use crate::constants::EMBEDDINGS_DIMENSION;

pub const TEST_CONTENTS: &str = r#"
            use std::collections::HashMap;

use super::RepositoryEmbeddingsDB;
use crate::{
    constants::{EMBEDDINGS_DIMENSION, MAX_FILES_COUNT, QDRANT_URL_DEFAULT},
    embeddings::Embeddings,
    github::{FileEmbeddings, Repository, RepositoryEmbeddings, RepositoryFilePaths},
    prelude::*,
};
use anyhow::Ok;
use async_trait::async_trait;
use qdrant_client::{
    prelude::*,
    qdrant::{vectors_config::Config, ScrollPoints, VectorParams, VectorsConfig},
};
use rayon::prelude::*;

pub struct QdrantDB {
    client: QdrantClient,
}

#[async_trait]
impl RepositoryEmbeddingsDB for QdrantDB {
    async fn insert_repo_embeddings(&self, repo: RepositoryEmbeddings) -> Result<()> {
        if self.client.has_collection(&repo.repo_id).await? {
            self.client.delete_collection(&repo.repo_id).await?;
        }
        self.client
            .create_collection(&CreateCollection {
                collection_name: repo.repo_id.clone(),
                vectors_config: Some(VectorsConfig {
                    config: Some(Config::Params(VectorParams {
                        size: EMBEDDINGS_DIMENSION as u64,
                        distance: Distance::Cosine.into(),
                        ..Default::default()
                    })),
                }),
                ..Default::default()
            })
            .await?;

        let points: Vec<PointStruct> = repo
            .file_embeddings
            .into_par_iter()
            .enumerate()
            .map(|file| {
                let FileEmbeddings { path, embeddings } = file.1;
                let payload: Payload = HashMap::from([("path", path.into())]).into();

                PointStruct::new(file.0 as u64, embeddings, payload)
            })
            .collect();
        self.client
            .upsert_points(repo.repo_id, None, points, None)
            .await?;
        Ok(())
    }

    async fn get_relevant_files(
        &self,
        repository: &Repository,
        query_embeddings: Embeddings,
        limit: usize,
    ) -> Result<RepositoryFilePaths> {
        let search_response = self
            .client
            .search_points(&SearchPoints {
                collection_name: repository.to_string(),
                vector: query_embeddings,
                with_payload: Some(true.into()),
                limit: limit as u64,
                ..Default::default()
            })
            .await?;
        let paths: Vec<String> = search_response
            .result
            .into_iter()
            .map(|point| point.payload["path"].to_string().replace('\"', ""))
            .collect();
        Ok(RepositoryFilePaths {
            repo_id: repository.to_string(),
            file_paths: paths,
        })
    }

    async fn get_file_paths(&self, repository: &Repository) -> Result<RepositoryFilePaths> {
        let scroll_reponse = self
            .client
            .scroll(&ScrollPoints {
                collection_name: repository.to_string(),
                limit: Some(MAX_FILES_COUNT as u32),
                with_payload: Some(true.into()),
                ..Default::default()
            })
            .await?;

        let file_paths: Vec<String> = scroll_reponse
            .result
            .par_iter()
            .map(|point| point.payload["path"].to_string().replace('\"', ""))
            .collect();
        Ok(RepositoryFilePaths {
            repo_id: repository.to_string(),
            file_paths,
        })
    }

    async fn is_indexed(&self, repository: &Repository) -> Result<bool> {
        self.client.has_collection(repository.to_string()).await
    }
}

impl QdrantDB {
    pub fn initialize() -> Result<QdrantDB> {
        let mut qdrant_url =
            std::env::var("QDRANT_URL").unwrap_or(String::from(QDRANT_URL_DEFAULT));

        if qdrant_url.is_empty() {
            qdrant_url = QDRANT_URL_DEFAULT.to_string();
        }

        let config = QdrantClientConfig::from_url(&qdrant_url);
        let client = QdrantClient::new(Some(config))?;
        Ok(QdrantDB { client })
    }
}"#;

// generated embedding using the prompt "How to get embeddings from qdrant"
pub const TEST_EMBEDDING: [f64; EMBEDDINGS_DIMENSION] = [
    -0.29409167170524597,
    -0.26726698875427246,
    -0.14842259883880615,
    -0.1805218756198883,
    -0.2669236958026886,
    0.7174615263938904,
    -0.2172778993844986,
    0.06505171209573746,
    0.03478961065411568,
    -0.2744060158729553,
    -0.04733092710375786,
    -0.458473265171051,
    0.17668916285037994,
    0.3595331311225891,
    -0.398483544588089,
    0.561796247959137,
    0.33195728063583374,
    0.36422258615493774,
    0.28251123428344727,
    -0.490253210067749,
    -0.5059323310852051,
    0.2920260727405548,
    0.41309407353401184,
    -0.46772533655166626,
    0.37435853481292725,
    -0.4318196177482605,
    0.015588052570819855,
    0.3832647204399109,
    0.33304518461227417,
    -0.013129901140928268,
    0.5352786779403687,
    -0.188743457198143,
    -0.31115126609802246,
    0.24314452707767487,
    -0.07667204737663269,
    0.5593081116676331,
    -0.14508622884750366,
    -0.5324783325195312,
    -0.2386465072631836,
    0.10603487491607666,
    0.36046385765075684,
    0.5703555345535278,
    -0.49338459968566895,
    0.20599868893623352,
    0.5548943877220154,
    0.03710059076547623,
    -0.16230353713035583,
    0.3172895908355713,
    -0.24444475769996643,
    -0.49221622943878174,
    -0.31053662300109863,
    -0.1942252516746521,
    -0.22018563747406006,
    0.06281088292598724,
    -0.024232638999819756,
    -0.4855024516582489,
    0.22753030061721802,
    -0.15743222832679749,
    -0.003455348778516054,
    0.1360452026128769,
    0.12423847615718842,
    -0.1538156270980835,
    0.13072653114795685,
    -0.27962908148765564,
    -0.15509150922298431,
    0.0715642049908638,
    -0.07174188643693924,
    0.6901159286499023,
    0.20628149807453156,
    0.27575427293777466,
    -0.20551738142967224,
    -0.3731920123100281,
    -0.5867311358451843,
    -0.18152347207069397,
    -0.08136572688817978,
    -0.09877517819404602,
    -0.09005524218082428,
    -0.06844249367713928,
    -0.004441075026988983,
    -0.7498811483383179,
    -0.08432985842227936,
    -0.2772100269794464,
    0.35460203886032104,
    -0.21112628281116486,
    0.34412410855293274,
    0.3207559585571289,
    -0.08871392905712128,
    0.1837751269340515,
    -0.10771748423576355,
    -0.2359970360994339,
    0.008926201611757278,
    -0.10249146819114685,
    -0.4094284176826477,
    0.09802833944559097,
    0.4162190854549408,
    -0.4904997646808624,
    0.4596407413482666,
    0.06442319601774216,
    0.17629092931747437,
    0.2106471210718155,
    -0.11768333613872528,
    0.2180057168006897,
    -0.019811177626252174,
    0.004716198891401291,
    -0.09036339819431305,
    -0.01798756793141365,
    0.13962164521217346,
    0.21424132585525513,
    -0.5486676096916199,
    -0.6332268118858337,
    -0.5956441164016724,
    0.28931543231010437,
    0.037885893136262894,
    -0.008688818663358688,
    -0.11658351123332977,
    -0.2744983732700348,
    0.38057076930999756,
    0.32520145177841187,
    0.09324890375137329,
    0.19255861639976501,
    -0.26119765639305115,
    0.3720022737979889,
    -0.03324076533317566,
    0.31617745757102966,
    -0.45868510007858276,
    -0.25156545639038086,
    -0.43039196729660034,
    8.548400630691069e-34,
    0.3322959542274475,
    0.0417257696390152,
    0.46573206782341003,
    0.17158393561840057,
    -0.08598686754703522,
    0.24790015816688538,
    0.02937157079577446,
    0.028385918587446213,
    -0.23880325257778168,
    -0.42192429304122925,
    -0.055054835975170135,
    -0.34715360403060913,
    -0.09555812925100327,
    0.20684705674648285,
    -0.020519359037280083,
    -0.1390296071767807,
    -0.6118253469467163,
    -0.36856797337532043,
    0.01614283211529255,
    -0.20206642150878906,
    -0.12317059934139252,
    -0.07168866693973541,
    -0.5260945558547974,
    -0.021645326167345047,
    -0.3166457712650299,
    -0.2140885293483734,
    0.6026620864868164,
    0.08142216503620148,
    -0.40298163890838623,
    -0.027459729462862015,
    -0.8052147030830383,
    -0.27182021737098694,
    -0.1296331137418747,
    -0.3840315043926239,
    -0.3915143311023712,
    -0.16133862733840942,
    0.04606669396162033,
    -0.019887324422597885,
    -0.5028603076934814,
    -0.5197572708129883,
    0.4721148610115051,
    -0.011669744737446308,
    0.05238903686404228,
    -0.40478286147117615,
    -0.3890470862388611,
    0.45236071944236755,
    0.21763737499713898,
    0.3097982406616211,
    0.14106397330760956,
    -0.34340551495552063,
    0.16128283739089966,
    0.1490345001220703,
    0.017286594957113266,
    -0.37489253282546997,
    0.18612243235111237,
    -0.41429173946380615,
    0.22910001873970032,
    0.33849823474884033,
    0.10267658531665802,
    -0.043193913996219635,
    0.12351205199956894,
    -0.06708650290966034,
    0.14595912396907806,
    0.08904232084751129,
    -0.19304326176643372,
    0.2030215710401535,
    -0.17951086163520813,
    -0.3455800712108612,
    0.06286915391683578,
    0.5660715103149414,
    -0.23099157214164734,
    0.3881697356700897,
    0.1806766241788864,
    -0.147863507270813,
    -0.00896205473691225,
    0.004806906450539827,
    -0.45584636926651,
    -0.3641848862171173,
    -0.26652249693870544,
    0.21013474464416504,
    -0.09483924508094788,
    -0.15864096581935883,
    0.2717926800251007,
    -0.3874017596244812,
    0.11708399653434753,
    -0.9157251715660095,
    0.5575246214866638,
    -0.6346259117126465,
    0.17266017198562622,
    0.3778693377971649,
    -0.22307375073432922,
    -0.1236608475446701,
    -0.14408500492572784,
    0.2471940815448761,
    0.17279338836669922,
    -6.331481467861591e-33,
    0.11948317289352417,
    0.32901114225387573,
    0.1662616729736328,
    0.08601469546556473,
    -0.18105226755142212,
    -0.05126238614320755,
    -0.2616906762123108,
    0.16391189396381378,
    0.14060243964195251,
    0.357915461063385,
    -0.23250271379947662,
    -0.0012299250811338425,
    0.3074676990509033,
    -0.3622274100780487,
    0.18708598613739014,
    0.12880481779575348,
    -0.09074395895004272,
    -0.0385122075676918,
    0.07070991396903992,
    0.09426150470972061,
    -0.22570636868476868,
    -0.19626012444496155,
    0.1813649833202362,
    -0.19551022350788116,
    0.3673386573791504,
    0.7598945498466492,
    0.36643558740615845,
    0.40359607338905334,
    -0.4396660327911377,
    -0.30264589190483093,
    0.2498025745153427,
    -0.9154858589172363,
    -0.6343411207199097,
    0.1039300411939621,
    -0.47052934765815735,
    0.06360839307308197,
    0.31243953108787537,
    0.2582050561904907,
    -0.08413176983594894,
    0.08757032454013824,
    0.12305819243192673,
    0.41310375928878784,
    -0.6044281125068665,
    0.31416192650794983,
    -0.02309616655111313,
    0.043178971856832504,
    0.06080075725913048,
    -0.24903590977191925,
    0.11019612103700638,
    -0.3625487685203552,
    0.2214505821466446,
    0.4026268720626831,
    -0.0005883201956748962,
    0.2898511290550232,
    0.1597885936498642,
    -0.03790230304002762,
    -0.008936883881688118,
    0.41470766067504883,
    0.38636094331741333,
    -0.21163174510002136,
    0.022756075486540794,
    -0.2891356945037842,
    -0.29227685928344727,
    -0.12065599858760834,
    0.11116570234298706,
    -0.5171768665313721,
    0.13371247053146362,
    0.341609388589859,
    0.13578671216964722,
    0.06661500781774521,
    0.07803374528884888,
    0.24479913711547852,
    0.3425345718860626,
    0.2278844118118286,
    0.26254284381866455,
    0.3399198055267334,
    -0.05761986970901489,
    0.5955430865287781,
    0.0552893802523613,
    -0.38033267855644226,
    0.38038113713264465,
    -0.5362194180488586,
    0.42826664447784424,
    0.3005805015563965,
    0.39465683698654175,
    -0.06644685566425323,
    0.5277190208435059,
    0.4029516577720642,
    0.42552661895751953,
    -0.06713070720434189,
    0.22288376092910767,
    0.34285396337509155,
    0.0226517915725708,
    0.7123807668685913,
    0.7662992477416992,
    -9.719519056261561e-8,
    -0.19666090607643127,
    -0.48964112997055054,
    -0.18277588486671448,
    -0.13534536957740784,
    -0.2765229046344757,
    -0.24294379353523254,
    -0.17991338670253754,
    0.3016146421432495,
    -0.2630390524864197,
    0.22246405482292175,
    -0.06402715295553207,
    -0.4443172216415405,
    -0.1305021047592163,
    0.04698067530989647,
    0.0631493404507637,
    -0.1641833484172821,
    0.14944639801979065,
    0.11380201578140259,
    0.2405797690153122,
    0.2221783697605133,
    -0.14249464869499207,
    0.5570642352104187,
    0.3126850724220276,
    0.03690851107239723,
    -0.4347224533557892,
    -0.07918047904968262,
    -0.14518693089485168,
    -0.1327483057975769,
    0.48697400093078613,
    0.18912452459335327,
    0.2189321517944336,
    0.13001209497451782,
    0.19801507890224457,
    -0.17585822939872742,
    -0.6474191546440125,
    0.23521605134010315,
    -0.1641656905412674,
    -0.242320254445076,
    0.12025471776723862,
    0.41792234778404236,
    -0.25503572821617126,
    -0.2892535328865051,
    -0.24187079071998596,
    0.014746323227882385,
    0.40600788593292236,
    0.16184066236019135,
    -0.15527139604091644,
    0.3303411602973938,
    0.2826705574989319,
    0.30464696884155273,
    0.2576218843460083,
    -0.38692227005958557,
    0.005261154379695654,
    -0.17222526669502258,
    -0.4623667001724243,
    0.12846098840236664,
    -0.25956398248672485,
    -0.0006742849946022034,
    0.2797046899795532,
    -0.3444517254829407,
    -0.4155624210834503,
    -0.24547268450260162,
    0.23610882461071014,
    0.28396207094192505,
];
